Send to all rooms:

		socket.broadcast.to().emit('message', {
			time: Date.now(),
			username: 'admin',
			message: session.username + ' has disconnected.'
		});

Accessing socket.broadcast actually sets a broadcast = true flag on the object.
-> flags are reset after each send or emit.

You can use the following functions to set data for client:
	Socket.prototype.set = function (key, value, fn) {
	Socket.prototype.get = function (key, fn) {
	Socket.prototype.has = function (key, fn) {
	Socket.prototype.del = function (key, fn) {

Using socket.to or socket.in calls this function:
	Socket.prototype.to = Socket.prototype.in = function (room) {
		this.flags.room = room;
		return this;
	};

This is the function that adds the slash to the user-supplied value for room:
	SocketNamespace.prototype.in = SocketNamespace.prototype.to = function (room) {
		this.flags.endpoint = this.name + (room ? '/' + room : '');
		return this;
	};

